// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

const find500DivisorsTriNum = () => {
  let i = 1;
  let naturalNumArr = [i];
  let triNumArr = [i];

  const makeTriNum = (arr) => {
      let nextTriNum = arr.reduce((acc, curVal) => acc += curVal);
      triNumArr.push(nextTriNum);
  }

  const findDivisors = (arr) => {
    let num = arr[arr.length - 1];
    let divisors = [];

    for (let i = 1; i <= num; i++) {
      if (num % i === 0) {
        divisors.push(i);
      }
    }

    return divisors
  };

  const countDivisors = (arr) => {
    if (arr.length > 500) return true
    return false
  };

  while (!countDivisors(findDivisors(triNumArr))) {
    i++;
    naturalNumArr.push(i);
    makeTriNum(naturalNumArr);
  };

  console.log(triNumArr[triNumArr.length - 1]);
};

find500DivisorsTriNum();